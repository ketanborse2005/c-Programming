#include <stdio.h>
#include <stdlib.h>

// Define structure for the node of the BST
struct Node {
    int data;
    struct Node* left;
    struct Node* right;
};

// Function to create a new node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->left = newNode->right = NULL;
    return newNode;
}

// Function to insert a new node into the BST
struct Node* insert(struct Node* root, int data) {
    if (root == NULL) {
        return createNode(data);
    }

    if (data < root->data) {
        root->left = insert(root->left, data);
    } else if (data > root->data) {
        root->right = insert(root->right, data);
    }

    return root;
}

// Function to find the minimum element in the BST
int findMin(struct Node* root) {
    if (root == NULL) {
        printf("The tree is empty.\n");
        return -1;
    }

    struct Node* current = root;
    while (current->left != NULL) {
        current = current->left;
    }

    return current->data;
}

// Function to find the maximum element in the BST
int findMax(struct Node* root) {
    if (root == NULL) {
        printf("The tree is empty.\n");
        return -1;
    }

    struct Node* current = root;
    while (current->right != NULL) {
        current = current->right;
    }

    return current->data;
}

// Function to search for a key in the BST
struct Node* search(struct Node* root, int key) {
    if (root == NULL || root->data == key) {
        return root;
    }

    if (key < root->data) {
        return search(root->left, key);
    } else {
        return search(root->right, key);
    }
}

// Function to display the menu
void menu() {
    printf("\nBinary Search Tree Operations\n");
    printf("1. Insert\n");
    printf("2. Search\n");
    printf("3. Find Minimum Element\n");
    printf("4. Find Maximum Element\n");
    printf("5. Exit\n");
}

int main() {
    struct Node* root = NULL;
    int choice, data, key;
    struct Node* result;

    while (1) {
        menu();
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:  // Insert
                printf("Enter data to insert: ");
                scanf("%d", &data);
                root = insert(root, data);
                printf("%d inserted into the BST.\n", data);
                break;

            case 2:  // Search
                printf("Enter key to search: ");
                scanf("%d", &key);
                result = search(root, key);
                if (result != NULL) {
                    printf("Element %d found in the tree.\n", key);
                } else {
                    printf("Element %d not found in the tree.\n", key);
                }
                break;

            case 3:  // Find Minimum
                data = findMin(root);
                if (data != -1) {
                    printf("The minimum element in the BST is: %d\n", data);
                }
                break;

            case 4:  // Find Maximum
                data = findMax(root);
                if (data != -1) {
                    printf("The maximum element in the BST is: %d\n", data);
                }
                break;

            case 5:  // Exit
                printf("Exiting...\n");
                exit(0);

            default:
                printf("Invalid choice! Please try again.\n");
        }
    }

    return 0;
}
