#include <stdio.h>
#include <stdlib.h>

#define TABLE_SIZE 10

// Hash table array
int hashTable[TABLE_SIZE];

// Function to initialize the hash table
void initializeTable() {
    for (int i = 0; i < TABLE_SIZE; i++) {
        hashTable[i] = -1;  // -1 indicates an empty slot
    }
}

// Hash function to map values to hash table indices
int hash(int key) {
    return key % TABLE_SIZE;
}

// Function to perform linear probing to insert a key
void insert(int key) {
    int index = hash(key);  // Hash the key
    int originalIndex = index;

    // Linear probing in case of collision
    while (hashTable[index] != -1) {
        printf("Collision at index %d, trying next index.\n", index);
        index = (index + 1) % TABLE_SIZE;  // Move to the next index
        if (index == originalIndex) {
            printf("Hash table is full, unable to insert %d\n", key);
            return;
        }
    }
    hashTable[index] = key;  // Insert the key
    printf("Inserted %d at index %d\n", key, index);
}

// Function to search for a key in the hash table
int search(int key) {
    int index = hash(key);
    int originalIndex = index;

    // Linear probing in case of collision
    while (hashTable[index] != -1) {
        if (hashTable[index] == key) {
            return index;  // Key found
        }
        index = (index + 1) % TABLE_SIZE;
        if (index == originalIndex) {
            break;
        }
    }
    return -1;  // Key not found
}

// Function to display the hash table
void displayTable() {
    printf("\nHash Table:\n");
    for (int i = 0; i < TABLE_SIZE; i++) {
        if (hashTable[i] != -1) {
            printf("Index %d: %d\n", i, hashTable[i]);
        } else {
            printf("Index %d: Empty\n", i);
        }
    }
}

int main() {
    int choice, key;

    // Initialize the hash table
    initializeTable();

    while (1) {
        printf("\nHashing with Linear Probing\n");
        printf("1. Insert\n");
        printf("2. Search\n");
        printf("3. Display Table\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter key to insert: ");
                scanf("%d", &key);
                insert(key);
                break;
            case 2:
                printf("Enter key to search: ");
                scanf("%d", &key);
                int index = search(key);
                if (index != -1) {
                    printf("Key %d found at index %d\n", key, index);
                } else {
                    printf("Key %d not found in the table\n", key);
                }
                break;
            case 3:
                displayTable();
                break;
            case 4:
                printf("Exiting...\n");
                exit(0);
            default:
                printf("Invalid choice! Please try again.\n");
        }
    }

    return 0;
}
